version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: factory-scheduler-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: factory_scheduler
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build: ./backend
    container_name: factory-scheduler-backend
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/factory_scheduler
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: factory_scheduler
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      SECRET_KEY: your-secret-key-change-in-production
      BACKEND_CORS_ORIGINS: http://localhost:3000,http://localhost:8001,http://127.0.0.1:3000
    ports:
      - "8001:8000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        python -c 'import asyncio; from app.db.base import engine; asyncio.run(engine.dispose())' &&
        echo 'Running migrations...' &&
        python scripts/seed_data.py &&
        echo 'Starting server...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # React Frontend
  frontend:
    build: ./frontend
    container_name: factory-scheduler-frontend
    environment:
      REACT_APP_API_URL: http://localhost:8001/api/v1
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    stdin_open: true
    tty: true

volumes:
  postgres_data: